
📘 USTAD Full Guide
ustad

    Topic

    Examples

    Again Examples

    Other Systems/Policy

Class 1
1. Topic
2. Examples
3. Again Examples
4. Other Systems/Policy
📂 FOR Text File
Topic 1. Writing to a File

with open('diary.txt', 'w') as f:
    f.write("Day 1: I started learning Python!\n")
    f.write("Day 2: I learned how to write files.")
    f.write("Day 3: How to write a new line.")

Explanation:

    with open(..., 'w') as f: Opens the file for writing. If it exists, overwrites it.

    f.write(...): Writes strings to file.

    \n: Adds new line.

Result:

Day 1: I started learning Python!
Day 2: I learned how to write files.
Day 3: How to write a new line.

➕ To append, use 'a' mode.
Topic 2. Reading a File

with open('diary.txt', 'r') as f:
    print(f.read())

Explanation:

    'r' mode opens file for reading.

    f.read() reads entire file content.

Output:

Day 1: I started learning Python!
Day 2: I learned how to write files.

❗ If file doesn’t exist, raises FileNotFoundError.
📂 FOR CSV
Topic 3. Writing Tabular CSV

import csv 

custom_dat = [
    ["user_name", "user_role", "user_address", "user_contact_number"],
    ["Person_A", "student", "Dhaka", 1711111111 ],
    ["Person_B", "Teacher", "Dhaka", 1622222222 ],
    ["Person_C", "Instructor", "Sylhet", 18333333333 ],
    ["Person_D", "Class Captain", "Chittagong", 1944444444444 ]
]

with open("customer_file.csv", mode="w", newline="") as file:
    writer = csv.writer(file)
    writer.writerows(custom_dat)

Result:

user_name,user_role,user_address,user_contact_number
Person_A,student,Dhaka,1711111111
...

To read:

with open("customer_file.csv", mode="r") as file:
    reader = csv.reader(file)
    for row in reader:
        print(row)

Topic 4. Writing Student Results CSV

import csv

student_result = [
    ["student_name","student_result", "student_result_grade"],
    ["studentA", 60, "B"],
    ...
]

with open("students_result_file.csv", mode="w", newline="") as file:
    writer = csv.writer(file)
    writer.writerows(student_result)

Topic 5. Filtering CSV with pandas

import pandas as pd

data = pd.read_csv("students_result_file.csv")

# Grade 'C'
print(data[data['student_result_grade'] == 'C'])

# Ensure numeric
data['student_result'] = pd.to_numeric(data['student_result'], errors='coerce')

# Filter <= 60
print(data[data['student_result'] <= 60])

Topic 6. newline Behavior
Option	Description
None	Default. Uses system newline for writing.
''	No translation. Use for CSV.
'\n'	Unix-style LF
'\r\n'	Windows-style CRLF
📂 JSON
Topic 7. Basic JSON Read

import json
json_str = '{"message": "Hello", "count": 3, "flag": true, "data": null}'
data = json.loads(json_str)
print(type(data), data)

Topic 8. Writing JSON to File

import json

data = {
    "name": "frieda",
    "is_dog": True,
    "age": 8
}

with open("output.json", "w") as json_file:
    json.dump(data, json_file, indent=2)

Output in file:

{
  "name": "frieda",
  "is_dog": true,
  "age": 8
}

Topic 9. Expanded JSON Entry

data["color"] = "Brown"
data["weight_kg"] = 25.4
...

Result:

{
  "name": "frieda",
  ...
  "favorite_food": "chicken",
  "microchipped": false
}

Topic 10. Sort JSON Keys

data = {"b": 22, "a": 100, "d": 46, "c": 89, "e": 78}
print(json.dumps(data, indent=2, sort_keys=True))

Output:

{
  "a": 100,
  "b": 22,
  "c": 89,
  ...
}

Topic 11. Update & Save JSON

with open("output.json", "r") as f:
    data = json.load(f)

# Access
print(data["name"])

# Update/Add/Remove
data["age"] += 2
data["favorite_food"] = "Burger"
data["daily_study_hours"] = 4
data.pop("likes_water", None)

# Save
with open("output_updated.json", "w") as f:
    json.dump(data, f, indent=2)

Topic 12. 📊 CSV vs JSON Comparison
Use Case	CSV	JSON
Tabular data	✅ Yes	❌ No
Nested/Structured data	❌ No	✅ Yes
API communication	❌ Rare	✅ Common
Editable in Excel	✅ Easy	❌ Hard
Configs / Settings files	❌ No	✅ Yes
Lightweight DB	✅ Good	✅ Good
