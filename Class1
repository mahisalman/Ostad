
# Ustad

## 1. Topic  
## 2. Examples  
## 3. Again Examples  
## 4. Other Systems/Policy  

---

# Class 1

---

## 1. Topic  
## 2. Examples  
## 3. Again Examples  
## 4. Other Systems/Policy  

---

# FOR Text File

## Topic 1  
---

This Python code snippet opens (or creates) a file named `diary.txt` in write mode ('w') and writes two lines of text into it:

```python
with open('diary.txt', 'w') as f:
    f.write("Day 1: I started learning Python!\n")
    f.write("Day 2: I learned how to write files.")
    f.write("Day 3: How to write a new line.")
```

**Explanation:**

- `with open(..., 'w') as f:` Opens the file for writing. If it already exists, it will be overwritten.
- `f.write(...)`: Writes the specified string to the file.
- The `\n` in the first write call adds a newline, so the second entry appears on the next line.

**Result in diary.txt:**

```
Day 1: I started learning Python!
Day 2: I learned how to write files.
Day 3: How to write a new line.
```

> **Note:** If you want to append to the diary in the future (instead of overwriting), use `'a'` mode instead of `'w'`.

---

## Topic 2  
---

This code snippet reads and prints the entire content of the `diary.txt` file:

```python
with open('diary.txt', 'r') as f:
    print(f.read())
```

**Explanation:**

- `'r'` mode opens the file for reading.
- `f.read()` reads the entire content of the file as a single string.
- `print(...)` outputs the content to the console.

**Expected Output:**

```
Day 1: I started learning Python!
Day 2: I learned how to write files.
```

> **Note:** If the file `diary.txt` doesn’t exist or was moved, this code will raise a `FileNotFoundError`.

---

# For CSV

## Topic 3  
---

This code creates and writes structured tabular data into a CSV file named `customer_file.csv`:

```python
import csv 

custom_dat = [
    ["user_name", "user_role", "user_address", "user_contact_number"],
    ["Person_A", "student", "Dhaka", 1711111111 ],
    ["Person_B", "Teacher", "Dhaka", 1622222222 ],
    ["Person_C", "Instructor", "Sylhet", 18333333333 ],
    ["Person_D", "Class Captain", "Chittagong", 1944444444444 ]
]

with open("customer_file.csv", mode="w", newline="") as file:
    writer = csv.writer(file)
    writer.writerows(custom_dat)
```

**Resulting `customer_file.csv`:**

```
user_name,user_role,user_address,user_contact_number
Person_A,student,Dhaka,1711111111
Person_B,Teacher,Dhaka,1622222222
Person_C,Instructor,Sylhet,18333333333
Person_D,Class Captain,Chittagong,1944444444444
```

**To read and display its contents:**

```python
import csv

with open("customer_file.csv", mode="r") as file:
    reader = csv.reader(file)
    for row in reader:
        print(row)
```

---

## Topic 4  
---

Writing student results to a CSV file:

```python
import csv

student_result = [
    ["student_name","student_result", "student_result_grade"],
    ["studentA", 60, "B"],
    ["studentB", 65, "B"],
    ["studentC", 85, "A"],
    ["studentD", 70, "A"],
    ["studentE", 50, "C"],
    ["studentF", 40, "C"],
    ["studentG", 55, "C"],
    ["studentH", 50, "C"],
    ["studentI", 10, "F"],
]

with open("students_result_file.csv", mode="w", newline="") as file:
    writer = csv.writer(file)
    writer.writerows(student_result)
```

---

## Topic 5  
---

Using Pandas to filter CSV data:

```python
import pandas as pd

data = pd.read_csv("students_result_file.csv")

print(data.head())

print("Students with grade C:")
print(data[data['student_result_grade'] == 'C'])

data['student_result'] = pd.to_numeric(data['student_result'], errors='coerce')

print("Students with result <= 60:")
print(data[data['student_result'] <= 60])
```

---

## Topic 6  
---

**Newline options summary:**

| Option       | Description                                                                       |
|--------------|-----------------------------------------------------------------------------------|
| `newline=None` | Default. Translates all newline formats on read; system default on write.        |
| `newline=''`   | No translation. Recommended for CSV to avoid blank lines (especially on Windows).|
| `newline='\n'` | Uses Unix-style LF only.                                                        |
| `newline='\r\n'` | Uses Windows-style CRLF.                                                      |
| `newline='\r'` | Classic Mac-style (rare).                                                      |

---

# For JSON

## Topic 7  
---

```python
import json

json_str = '{"message": "Hello", "count": 3, "flag": true, "data": null}'
data = json.loads(json_str)
print(type(data), data)
```

---

## Topic 8  
---

```python
import json

data = {
    "name": "frieda",
    "is_dog": True,
    "age": 8
}

with open("output.json", "w") as json_file:
    json.dump(data, json_file, indent=2)

print("Data saved to output.json")
```

---

## Topic 9  
---

```python
import json

data = {
    "name": "frieda",
    "is_dog": True,
    "age": 8,
    "color": "Brown",
    "weight_kg": 25.4,
    "breed": "Labrador",
    "vaccinated": True,
    "favorite_food": "chicken",
    "microchipped": False,
    "owner": "John Doe"
}

with open("output.json", "w", encoding="utf-8") as f:
    json.dump(data, f, indent=2)

print("Data saved to output.json")
```

---

## Topic 10  
---

```python
import json
data = {"b": 22, "a": 100, "d": 46, "c": 89, "e": 78}

print(json.dumps(data, indent=2, sort_keys=True))

with open("sorted_output.json", "w") as f:
    json.dump(data, f, indent=2, sort_keys=True)
```

---

## Topic 11  
---

```python
import json

with open("output.json", "r", encoding="utf-8") as f:
    data = json.load(f)

print("Name:", data["name"])
print("Favorite food:", data["favorite_food"])

data["age"] += 2
data["favorite_food"] = "Burger"
data["last_vet_visit"] = "2025-07-20"
data["disliked_food"] = "vegetables"
data["daily_study_hours"] = 4
data.pop("likes_water", None)

print("\n🐶 Updated Dog Profile:")
for key, value in data.items():
    print(f"{key}: {value}")

with open("output_updated.json", "w", encoding="utf-8") as f:
    json.dump(data, f, indent=2)

print("\n✅ Data successfully updated and saved to output_updated.json")
```

---

## Topic 12  
---

### 📊 CSV vs JSON: Use Case Comparison

| Use Case                   | CSV     | JSON        |
|----------------------------|---------|-------------|
| Tabular data (rows/columns)| ✅ Yes  | ❌ Not Ideal|
| Nested/structured data     | ❌ No   | ✅ Yes      |
| API communication          | ❌ Rare | ✅ Standard |
| Editable in Excel          | ✅ Easy | ❌ Hard     |
| Configs/settings files     | ❌ No   | ✅ Common   |
| Small databases/storage    | ✅ Simpler | ✅ Flexible |
